package main

import (
	"bytes"
	"encoding/json"
	"flag"
	"fmt"
	"io/ioutil"
	"strings"
	"text/template"
)

// SchemaCodeTmpl is template for schema code.
const SchemaCodeTmpl = `// generated by gen-schema; DO NOT EDIT
package main

{{range .}}
type {{.CamelName}}Table struct {
	{{range .Attributes}}
	{{.CamelName}} {{.GoType}} ` + "`json:\"{{.Name}}\"`" + `
	{{end}}
}
{{end}}
`

// TableSchema is definition of table schema.
type TableSchema struct {
	Name       string            `json:"name"`
	Attributes []AttributeSchema `json:"attributes"`
}

// CamelName returns camelized Name.
func (s *TableSchema) CamelName() string {
	return camelize(s.Name)
}

// AttributeSchema is definition of attribute schema.
type AttributeSchema struct {
	Name string `json:"name"`
	Type string `json:"type"`
}

// CamelName returns camelized Name.
func (s *AttributeSchema) CamelName() string {
	return camelize(s.Name)
}

// GoType returns type name in golang.
func (s *AttributeSchema) GoType() (string, error) {
	switch s.Type {
	case "S":
		return "string", nil
	case "N":
		return "int64", nil
	default:
		return "", fmt.Errorf("invalid type: %s", s.Type)
	}
}

func camelize(s string) string {
	ret := ""

	for _, part := range strings.Split(s, "_") {
		ret += strings.ToUpper(part[0:1]) + part[1:]
	}

	return ret
}

func main() {
	inPath := flag.String("in", "", "input file path")
	outPath := flag.String("out", "", "output file path")
	flag.Parse()

	in, err := ioutil.ReadFile(*inPath)
	if err != nil {
		fmt.Println("failed to read file:", err)
		return
	}

	var schema []TableSchema
	if err := json.Unmarshal(in, &schema); err != nil {
		fmt.Println("failed to parse schema:", err)
		return
	}

	tmpl := template.Must(template.New("schema").Parse(SchemaCodeTmpl))
	bf := new(bytes.Buffer)

	if err := tmpl.Execute(bf, schema); err != nil {
		fmt.Println("failed to execute template:", err)
		return
	}

	if err := ioutil.WriteFile(*outPath, bf.Bytes(), 0644); err != nil {
		fmt.Println("failed to write to", outPath, ":", err)
		return
	}
}
